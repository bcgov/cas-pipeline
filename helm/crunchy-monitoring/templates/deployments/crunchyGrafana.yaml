apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
{{ include "crunchy-monitoring.labels" . | indent 4 }}
  name: crunchy-grafana
  namespace: {{ .Values.namespace }}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}
      name: crunchy-grafana
{{ include "crunchy-monitoring.selectorLabels" . | indent 6 }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}
        name: crunchy-grafana
    spec:
      containers:
      - env:
        - name: GF_PATHS_DATA
          value: /data/grafana/data
        - name: GF_SECURITY_ADMIN_USER__FILE
          value: /conf/admin/username
        - name: GF_SECURITY_ADMIN_PASSWORD__FILE
          value: /conf/admin/password
        - name: PROM_HOST
          value: crunchy-prometheus
        - name: PROM_PORT
          value: "9090"
        image: grafana/grafana:7.4.5
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 25
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 1
        name: grafana
        ports:
        - containerPort: 3000
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/grafana/
          name: grafana-config
        - mountPath: /data
          name: grafanadata
        - mountPath: /conf/admin
          name: grafana-secret
        - mountPath: /etc/grafana/provisioning/datasources
          name: grafana-datasources
        - mountPath: /etc/grafana/provisioning/dashboards
          name: grafana-dashboards
      - args:
        - --provider=openshift
        - --pass-basic-auth=false
        - --https-address=
        - --http-address=:9091
        - --email-domain=*
        - --upstream=http://localhost:3000
        - --cookie-secret=asdf
        - --openshift-service-account=grafana
        - --skip-auth-regex=^/metrics
        - '--openshift-sar={"namespace": "{{ .Values.namespace }}", "resource": "services", "verb":
          "get"}'
        image: image-registry.openshift-image-registry.svc:5000/openshift/oauth-proxy:v4.4
        imagePullPolicy: IfNotPresent
        name: grafana-proxy
        ports:
        - containerPort: 9091
          name: grafana-proxy
          protocol: TCP
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: grafana
      serviceAccountName: grafana
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: grafana-config
        name: grafana-config
      - name: grafanadata
        persistentVolumeClaim:
          claimName: grafanadata
      - name: grafana-secret
        secret:
          defaultMode: 420
          secretName: grafana-secret
      - configMap:
          defaultMode: 420
          name: grafana-datasources
        name: grafana-datasources
      - configMap:
          defaultMode: 420
          name: grafana-dashboards
        name: grafana-dashboards
